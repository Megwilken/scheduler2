{"ast":null,"code":"/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\nexport default trimResultTransformer;","map":{"version":3,"sources":["../../src/trimResultTransformer/trimResultTransformer.js"],"names":["trimResultTransformer","side","onEndResult","endResult"],"mappings":"AAAA;;;;;AAKA,IAAMA,qBAAAA,GAAwB,SAAxBA,qBAAwB,GAAA;EAAA,IAACC,IAAD,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAA;EAAA,OAAgB;IAC5CC,WAD4C,EAAA,SAAA,WAAA,CAAA,SAAA,EACrB;MACrB,IAAID,IAAAA,KAAJ,EAAA,EAAiB;QACf,OAAOE,SAAAA,CAAP,IAAOA,EAAP;MACD;;MAEDF,IAAAA,GAAOA,IAAAA,CAAPA,WAAOA,EAAPA;;MAEA,IAAIA,IAAAA,KAAAA,OAAAA,IAAoBA,IAAAA,KAAxB,MAAA,EAAyC;QACvC,OAAOE,SAAAA,CAAAA,OAAAA,CAAAA,MAAAA,EAAP,EAAOA,CAAP;MACD;;MAED,IAAIF,IAAAA,KAAAA,KAAAA,IAAkBA,IAAAA,KAAtB,OAAA,EAAwC;QACtC,OAAOE,SAAAA,CAAAA,OAAAA,CAAAA,MAAAA,EAAP,EAAOA,CAAP;MACD;;MAED,MAAM,IAAA,KAAA,CAAA,yBAAN,IAAM,CAAN;IACD;EAjB2C,CAAhB;AAA9B,CAAA;;AAoBA,eAAA,qBAAA","sourcesContent":["/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nconst trimResultTransformer = (side = '') => ({\n  onEndResult(endResult) {\n    if (side === '') {\n      return endResult.trim();\n    }\n\n    side = side.toLowerCase();\n\n    if (side === 'start' || side === 'left') {\n      return endResult.replace(/^\\s*/, '');\n    }\n\n    if (side === 'end' || side === 'right') {\n      return endResult.replace(/\\s*$/, '');\n    }\n\n    throw new Error(`Side not supported: ${side}`);\n  },\n});\n\nexport default trimResultTransformer;\n"]},"metadata":{},"sourceType":"module"}